{"status":"ok","feed":{"url":"https://medium.com/feed/@arondylan72","title":"Stories by Dylan Aron on Medium","link":"https://medium.com/@arondylan72?source=rss-c1dac106fb1e------2","author":"","description":"Stories by Dylan Aron on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*DINA_NhkGbEiMNCJ"},"items":[{"title":"Skateboard Controller\u200a\u2014\u200aFinal Week","pubDate":"2023-07-28 23:42:28","link":"https://medium.com/@arondylan72/skateboard-controller-final-week-fd5df77cc983?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/fd5df77cc983","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/432/1*-owC4C6fxrBrO1bZB3Z_2A.gif","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aFinal\u00a0Week</h3>\n<p>This is my final week I worked on my skateboard controller for this semester. I finished up the grinding, and did some final polishing. I started off cleaning up some of my code and adding more documentation for my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a> where the source code is publicly available!</p>\n<p>Last week I implemented a tool to create grindable objects and made a rough version of grinding on the character. This week I improved the grinding by adding animations, aligned the character to the rail properly, as well as took into account the slope of the rail to increase and decrease the player grinding\u00a0speed!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/432/1*-owC4C6fxrBrO1bZB3Z_2A.gif\"><figcaption>Grinding Up and\u00a0Down</figcaption></figure><p>After taking into account the slope of the rail this allows a player to grind up and down the rail as shown above! And the aligning the player along with a basic balance animation I mocapped improved the overall look while grinding.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/432/1*qCcUiVPuc6M0un2iPrAs8w.gif\"><figcaption>Rotating with the\u00a0rail</figcaption></figure><p>After implementing these changes I polished other parts of the character by tweaking many of the skate variables I made easily accesible on the Skater blueprint. I created some fun rails and ramps and player around the movement variables to improve the overall experience. After this I added one more grab to the\u00a0game.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/894/1*CXmlOtaczK7S82-ckSdE1g.png\"><figcaption>Christ Air\u00a0Grab</figcaption></figure><p>I added the classic \u201cChrist Air\u201d grab from Skate 3! I recorded this with motion capture and I just had to put\u00a0in!</p>\n<p>This was my last week to work on this personal programming project for the semester, but I plan to continue and expand upon this project as I have had so much fun working on it. If you would like to check out the project for yourself it is publicly available on my GitHub and if you expand upon it let me know what you\u00a0make!</p>\n<p><a href=\"https://dylannaron.github.io/\">https://dylannaron.github.io/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd5df77cc983\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aFinal\u00a0Week</h3>\n<p>This is my final week I worked on my skateboard controller for this semester. I finished up the grinding, and did some final polishing. I started off cleaning up some of my code and adding more documentation for my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a> where the source code is publicly available!</p>\n<p>Last week I implemented a tool to create grindable objects and made a rough version of grinding on the character. This week I improved the grinding by adding animations, aligned the character to the rail properly, as well as took into account the slope of the rail to increase and decrease the player grinding\u00a0speed!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/432/1*-owC4C6fxrBrO1bZB3Z_2A.gif\"><figcaption>Grinding Up and\u00a0Down</figcaption></figure><p>After taking into account the slope of the rail this allows a player to grind up and down the rail as shown above! And the aligning the player along with a basic balance animation I mocapped improved the overall look while grinding.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/432/1*qCcUiVPuc6M0un2iPrAs8w.gif\"><figcaption>Rotating with the\u00a0rail</figcaption></figure><p>After implementing these changes I polished other parts of the character by tweaking many of the skate variables I made easily accesible on the Skater blueprint. I created some fun rails and ramps and player around the movement variables to improve the overall experience. After this I added one more grab to the\u00a0game.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/894/1*CXmlOtaczK7S82-ckSdE1g.png\"><figcaption>Christ Air\u00a0Grab</figcaption></figure><p>I added the classic \u201cChrist Air\u201d grab from Skate 3! I recorded this with motion capture and I just had to put\u00a0in!</p>\n<p>This was my last week to work on this personal programming project for the semester, but I plan to continue and expand upon this project as I have had so much fun working on it. If you would like to check out the project for yourself it is publicly available on my GitHub and if you expand upon it let me know what you\u00a0make!</p>\n<p><a href=\"https://dylannaron.github.io/\">https://dylannaron.github.io/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd5df77cc983\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["unreal-engine","game-development","game-design","skateboarding"]},{"title":"Skateboard Controller\u200a\u2014\u200aGrinding","pubDate":"2023-07-21 20:57:55","link":"https://medium.com/@arondylan72/skateboard-controller-grinding-69a8709c802d?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/69a8709c802d","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/346/1*mfT2pb6J1L1iS3zTxxu3xA.gif","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aGrinding</h3>\n<p>This week I started work on grinding for my skater! I created a new substate for our skating movement as well as created a tool to place grindable objects, and grinding functions for the\u00a0skater.</p>\n<p>Before creating the movement and interactions for our grinding substate I need some obstacles to grind. I figured I would create a tool that allows designers to easily place a \u201cgrindable\u201d object. I used unreal\u2019s built in spline component to allow the user to place the object in any direction, so that on construction I would instantiate a desired mesh along the\u00a0spline.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*mfT2pb6J1L1iS3zTxxu3xA.gif\"><figcaption>GrindableObject Tool</figcaption></figure><p>After creating this tool it was time actually do some grinding. I added a grinding substate to the skater, which we can enter if the bottom of our skateboard mesh overlaps with a grindable object. Once in the grinding substate we will no longer allow movement/spinning, we will slide along the spline until we reach the end or we decide to\u00a0exit.</p>\n<p>It was very easy to determine which way slide along the spline by taking the dot product of our velocity and the splines forward vector. Once we start sliding on the spline it was cool to fall off the end, but we want to allow the skater to jump on it and off it! So I added the ability to input a directional force when enacting a flatground trick only when we are grinding, so that we could ollie in the direction we push the left analog\u00a0stick.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/247/1*fMGUkgk7aaXrZ1iJtK91Mw.gif\"><figcaption>Grinding!!</figcaption></figure><p>This was feeling pretty fun! I plan to polish this grinding mechanic next week by adding some variation in grinding speed, and the ability to speed up and slow\u00a0down.</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69a8709c802d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aGrinding</h3>\n<p>This week I started work on grinding for my skater! I created a new substate for our skating movement as well as created a tool to place grindable objects, and grinding functions for the\u00a0skater.</p>\n<p>Before creating the movement and interactions for our grinding substate I need some obstacles to grind. I figured I would create a tool that allows designers to easily place a \u201cgrindable\u201d object. I used unreal\u2019s built in spline component to allow the user to place the object in any direction, so that on construction I would instantiate a desired mesh along the\u00a0spline.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*mfT2pb6J1L1iS3zTxxu3xA.gif\"><figcaption>GrindableObject Tool</figcaption></figure><p>After creating this tool it was time actually do some grinding. I added a grinding substate to the skater, which we can enter if the bottom of our skateboard mesh overlaps with a grindable object. Once in the grinding substate we will no longer allow movement/spinning, we will slide along the spline until we reach the end or we decide to\u00a0exit.</p>\n<p>It was very easy to determine which way slide along the spline by taking the dot product of our velocity and the splines forward vector. Once we start sliding on the spline it was cool to fall off the end, but we want to allow the skater to jump on it and off it! So I added the ability to input a directional force when enacting a flatground trick only when we are grinding, so that we could ollie in the direction we push the left analog\u00a0stick.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/247/1*fMGUkgk7aaXrZ1iJtK91Mw.gif\"><figcaption>Grinding!!</figcaption></figure><p>This was feeling pretty fun! I plan to polish this grinding mechanic next week by adding some variation in grinding speed, and the ability to speed up and slow\u00a0down.</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69a8709c802d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["game-development","unreal-engine","skateboarding"]},{"title":"Skateboard Controller\u200a\u2014\u200aBug Fixing &amp; Polish","pubDate":"2023-07-14 19:10:40","link":"https://medium.com/@arondylan72/skateboard-controller-bug-fixing-polish-4db19376bbf7?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/4db19376bbf7","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/528/1*KOfGh8eJ0RnL__WQ6-y2oQ.gif","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aBug Fixing &amp;\u00a0Polish</h3>\n<p>This week I worked on adding more polish and quality of life improvements to the skateboard controller. I also found some annoying bugs that I dealt\u00a0with.</p>\n<p>I first started with adding some final touches to the flick system. I added a preparing trick transition state. When the user starts moving the right analog stick we will only enter this state when we are in a valid start section. This is determined based on the possible tricks we have available. Once we enter this state the character will crouch down to visually show that they are preparing a trick. After this improvement I also added more to my UI widget to display trick names when they are executed.</p>\n<p>While skating around in game and having some fun stomping kickflips I encountered some odd bugs for skateboard movement that I decided to\u00a0address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/528/1*KOfGh8eJ0RnL__WQ6-y2oQ.gif\"><figcaption>Random floating\u00a0bug</figcaption></figure><p>The first was in my character movement component, at some angles the character would just start floating randomly. I reworked my velocity calculation to make sure this would not happen. I found that I was not applying any downward gravity while grounded just the slope force that I was calculating, so I made sure this force was not in an odd direction as well as adding some additional downward force. The next bug I noticed the skater would jitter when rolling over corners where the floor angle would change drastically.</p>\n<p>I fixed this issue by adding a second ray cast from the character for detecting the floor. Initially I had one coming from the center of the skater, but we do have wheels on the front and back so I changed that to have ray casts come down from the wheels and if both are touching the ground then take the normal from both of those and average it to get a smoother experience.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/472/1*3_wG5JF86w6eU_4m2c-6zA.gif\"><figcaption>2 ray casts to better roll over a\u00a0corner</figcaption></figure><p>These movement fixes took up a lot more time then I thought it would. I did not have much time to start work on grinding, so after dealing with these bugs, I decided to add the ability to get on and off the board. Since I have extended from the character movement component in Unreal Engine this should be relatively easy I just need to add some checks and implement some cool animations and transitions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/384/1*thDBp3BtyId4ou4hYMG6eQ.gif\"><figcaption>Getting on/off\u00a0board</figcaption></figure><p>For next week, I plan to work on the grinding functionality of our skate character. If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4db19376bbf7\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aBug Fixing &amp;\u00a0Polish</h3>\n<p>This week I worked on adding more polish and quality of life improvements to the skateboard controller. I also found some annoying bugs that I dealt\u00a0with.</p>\n<p>I first started with adding some final touches to the flick system. I added a preparing trick transition state. When the user starts moving the right analog stick we will only enter this state when we are in a valid start section. This is determined based on the possible tricks we have available. Once we enter this state the character will crouch down to visually show that they are preparing a trick. After this improvement I also added more to my UI widget to display trick names when they are executed.</p>\n<p>While skating around in game and having some fun stomping kickflips I encountered some odd bugs for skateboard movement that I decided to\u00a0address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/528/1*KOfGh8eJ0RnL__WQ6-y2oQ.gif\"><figcaption>Random floating\u00a0bug</figcaption></figure><p>The first was in my character movement component, at some angles the character would just start floating randomly. I reworked my velocity calculation to make sure this would not happen. I found that I was not applying any downward gravity while grounded just the slope force that I was calculating, so I made sure this force was not in an odd direction as well as adding some additional downward force. The next bug I noticed the skater would jitter when rolling over corners where the floor angle would change drastically.</p>\n<p>I fixed this issue by adding a second ray cast from the character for detecting the floor. Initially I had one coming from the center of the skater, but we do have wheels on the front and back so I changed that to have ray casts come down from the wheels and if both are touching the ground then take the normal from both of those and average it to get a smoother experience.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/472/1*3_wG5JF86w6eU_4m2c-6zA.gif\"><figcaption>2 ray casts to better roll over a\u00a0corner</figcaption></figure><p>These movement fixes took up a lot more time then I thought it would. I did not have much time to start work on grinding, so after dealing with these bugs, I decided to add the ability to get on and off the board. Since I have extended from the character movement component in Unreal Engine this should be relatively easy I just need to add some checks and implement some cool animations and transitions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/384/1*thDBp3BtyId4ou4hYMG6eQ.gif\"><figcaption>Getting on/off\u00a0board</figcaption></figure><p>For next week, I plan to work on the grinding functionality of our skate character. If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4db19376bbf7\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["game-development","skateboarding","unreal-engine"]},{"title":"Skateboard Controller\u200a\u2014\u200aFlick Trick System","pubDate":"2023-07-07 02:15:05","link":"https://medium.com/@arondylan72/skateboard-controller-flick-trick-system-e991f57f7442?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/e991f57f7442","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/740/1*wM01oUPn9WenRKjWM-0vTg.png","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aFlick Trick\u00a0System</h3>\n<p>This week I continued work on my analog stick trick system for initiating flat ground skate tricks. In the previous week I setup the foundation for this component with gesture recognition, so I worked on refining this as well as making it more user friendly to design new\u00a0tricks!</p>\n<p>I added in some more ways to cancel the current trick combo or mark a trick invalid. This included checking when our analog stick was in the analog stick dead zone for too long. After adding this I created a delegate to notify the Skate character when a valid trick was performed and pass in all the information of the trick. I needed to know different aspects of the trick such as its name and associated animations, so I setup a custom data structure in Unreal Engine to represent our different flat ground\u00a0tricks.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/740/1*wM01oUPn9WenRKjWM-0vTg.png\"><figcaption>Trick Combo Struct shown in the UE Blueprint Editor</figcaption></figure><p>With this custom data structure I was able to start designing tricks in the blueprint editor easily. After starting to design tricks I found myself confused on what number represented which section of the analog stick \u201ccircle\u201d that I had setup in the previous week. Choosing the numbered section of the circle was pretty unintuitive, so I created an enum to improve\u00a0that.</p>\n<p>Once the system for designing tricks was working well and setup with the the character animating and the board animating it was time to make some tricks! I already have a lot of animations mocapped for the body, but I needed some animations for the board, so I made some for an Ollie, Kickflip, Heelflip, and a\u00a0ShuvIt!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/333/1*yj-L69xOElLIpvKM0my3YA.gif\"><figcaption>Flicking some\u00a0tricks!</figcaption></figure><p>For next week, I plan to add some more visual polish to the trick system such as creating a wind up state and associated animation to visually show the player is initiating a combo. Then it will be time to add the next major part of skateboarding\u00a0\u2026 Grinding!</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e991f57f7442\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aFlick Trick\u00a0System</h3>\n<p>This week I continued work on my analog stick trick system for initiating flat ground skate tricks. In the previous week I setup the foundation for this component with gesture recognition, so I worked on refining this as well as making it more user friendly to design new\u00a0tricks!</p>\n<p>I added in some more ways to cancel the current trick combo or mark a trick invalid. This included checking when our analog stick was in the analog stick dead zone for too long. After adding this I created a delegate to notify the Skate character when a valid trick was performed and pass in all the information of the trick. I needed to know different aspects of the trick such as its name and associated animations, so I setup a custom data structure in Unreal Engine to represent our different flat ground\u00a0tricks.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/740/1*wM01oUPn9WenRKjWM-0vTg.png\"><figcaption>Trick Combo Struct shown in the UE Blueprint Editor</figcaption></figure><p>With this custom data structure I was able to start designing tricks in the blueprint editor easily. After starting to design tricks I found myself confused on what number represented which section of the analog stick \u201ccircle\u201d that I had setup in the previous week. Choosing the numbered section of the circle was pretty unintuitive, so I created an enum to improve\u00a0that.</p>\n<p>Once the system for designing tricks was working well and setup with the the character animating and the board animating it was time to make some tricks! I already have a lot of animations mocapped for the body, but I needed some animations for the board, so I made some for an Ollie, Kickflip, Heelflip, and a\u00a0ShuvIt!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/333/1*yj-L69xOElLIpvKM0my3YA.gif\"><figcaption>Flicking some\u00a0tricks!</figcaption></figure><p>For next week, I plan to add some more visual polish to the trick system such as creating a wind up state and associated animation to visually show the player is initiating a combo. Then it will be time to add the next major part of skateboarding\u00a0\u2026 Grinding!</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e991f57f7442\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["unreal-engine","skate","gesture-recognition","skateboarding","game-development"]},{"title":"Skateboard Controller\u200a\u2014\u200aGesture Recognition","pubDate":"2023-06-30 20:21:19","link":"https://medium.com/@arondylan72/skateboard-controller-gesture-recognition-31654c4cc134?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/31654c4cc134","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/346/1*lHcqEAuSz55WCsb6I9vyBA.gif","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aGesture Recognition</h3>\n<p>This week I added some visual improvements and started work on creating analog stick gesture recognition to initiate flat ground skate\u00a0tricks.</p>\n<p>I had my midterm presentation this week, so I decided to add more to my animation state system to show off some of the cool motion captures I have taken in engine! I added two different grabs the user can initiate with either of the controller triggers, as well as my recorded pushing, idle, ollie animations for general movement and jumping. Here is a video to show off some of\u00a0those!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*lHcqEAuSz55WCsb6I9vyBA.gif\"><figcaption>Showing off Indy and Melon grab animation</figcaption></figure><p>After my presentation, I got to work on my flick system. I previously created a UI element to visualize the analog stick movement, so I got that working in game and created my flick system as a separate actor component in C++ to attach to the character. I initially did some research on different ways to detect the direction a user flicks the analog system, but I ultimately decided to take a more simplistic approach to this system by detecting points the analog stick hits around a circle, because the user will only have a short interval to perform a flick\u00a0combo.</p>\n<p>I achieved the basics of this by making functions that would check if the analog stick is close to the\u00a0edge.</p>\n<pre>bool UAnalogStickTrickSystem::IsCloseToEdge(const float x, const float y)<br>{<br> double distance = std::sqrt(x * x + y * y);<br> return std::abs(distance - 1) &lt;= EdgeThreshold;<br>}</pre>\n<p>And then I would check what section of the circle they are in by taking the arctangent of the analog stick\u00a0values</p>\n<pre>int UAnalogStickTrickSystem::GetSection(const float x, const float y)<br>{<br> float angle = std::atan2(y, x);<br> if (angle &lt; 0) {<br>  angle += 2 * PI;<br> }<br> float sectionSize = 2 * PI / numSections;<br> float adjustedAngle = angle - offsetAngle;<br> if (adjustedAngle &lt; 0) {<br>  adjustedAngle += 2 * PI;<br> }<br> int section = static_cast&lt;int&gt;(adjustedAngle / sectionSize) + 1;<br> return section;<br>}</pre>\n<p>With these functions I setup an array to hold the current combo and one to hold possible combos and I would check if a valid combo was performed. I realized quickly that I will need to setup time restraints and end the current combo if the stick is left in it\u2019s dead zone, but I was able to record a combo and perform an ollie which was flicking down and\u00a0up!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/432/1*5eO7tewzCNYMjey4mnfZCw.gif\"></figure><p>I plan to continue iterating on this system, as well as start on creating a custom data type to allow a designer to easily add new combos with associated animations to\u00a0play!</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=31654c4cc134\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aGesture Recognition</h3>\n<p>This week I added some visual improvements and started work on creating analog stick gesture recognition to initiate flat ground skate\u00a0tricks.</p>\n<p>I had my midterm presentation this week, so I decided to add more to my animation state system to show off some of the cool motion captures I have taken in engine! I added two different grabs the user can initiate with either of the controller triggers, as well as my recorded pushing, idle, ollie animations for general movement and jumping. Here is a video to show off some of\u00a0those!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*lHcqEAuSz55WCsb6I9vyBA.gif\"><figcaption>Showing off Indy and Melon grab animation</figcaption></figure><p>After my presentation, I got to work on my flick system. I previously created a UI element to visualize the analog stick movement, so I got that working in game and created my flick system as a separate actor component in C++ to attach to the character. I initially did some research on different ways to detect the direction a user flicks the analog system, but I ultimately decided to take a more simplistic approach to this system by detecting points the analog stick hits around a circle, because the user will only have a short interval to perform a flick\u00a0combo.</p>\n<p>I achieved the basics of this by making functions that would check if the analog stick is close to the\u00a0edge.</p>\n<pre>bool UAnalogStickTrickSystem::IsCloseToEdge(const float x, const float y)<br>{<br> double distance = std::sqrt(x * x + y * y);<br> return std::abs(distance - 1) &lt;= EdgeThreshold;<br>}</pre>\n<p>And then I would check what section of the circle they are in by taking the arctangent of the analog stick\u00a0values</p>\n<pre>int UAnalogStickTrickSystem::GetSection(const float x, const float y)<br>{<br> float angle = std::atan2(y, x);<br> if (angle &lt; 0) {<br>  angle += 2 * PI;<br> }<br> float sectionSize = 2 * PI / numSections;<br> float adjustedAngle = angle - offsetAngle;<br> if (adjustedAngle &lt; 0) {<br>  adjustedAngle += 2 * PI;<br> }<br> int section = static_cast&lt;int&gt;(adjustedAngle / sectionSize) + 1;<br> return section;<br>}</pre>\n<p>With these functions I setup an array to hold the current combo and one to hold possible combos and I would check if a valid combo was performed. I realized quickly that I will need to setup time restraints and end the current combo if the stick is left in it\u2019s dead zone, but I was able to record a combo and perform an ollie which was flicking down and\u00a0up!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/432/1*5eO7tewzCNYMjey4mnfZCw.gif\"></figure><p>I plan to continue iterating on this system, as well as start on creating a custom data type to allow a designer to easily add new combos with associated animations to\u00a0play!</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=31654c4cc134\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["unreal-engine","game-development","skate"]},{"title":"Skateboard Controller\u200a\u2014\u200aAnimations &amp; Motion Capture","pubDate":"2023-06-22 14:21:36","link":"https://medium.com/@arondylan72/skateboard-controller-animations-motion-capture-f0018b30103f?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/f0018b30103f","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/576/1*c6hC08JbURK7qb77_HS7vw.gif","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aAnimations &amp; Motion\u00a0Capture</h3>\n<p>This week I worked on capturing some cool animations through motion capture as well as finishing up ways to crash, and finally started on to flat ground\u00a0tricks!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/576/1*c6hC08JbURK7qb77_HS7vw.gif\"><figcaption>Motion Capture on a skateboard</figcaption></figure><p>It was a lot of fun to put on the suit and hop into a motion capture studio. I recorded multiple animations for a variety of poses and tricks including idle, landing, falling, getting on and off, as well as in air grabs and flat ground tricks. With these motion capture files and the help of an animator I was able to produce the FBX files to bring into Unreal Engine. While in Unreal Engine I only had to retarget animations to the skeleton of the current character asset that I am using as well as make some minor adjustments. Now I am ready to implement these animations into the gameplay!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/320/1*MjBe3pZC9sG7VgWX9_p-mg.gif\"><figcaption>Mocap File brought into\u00a0Unreal</figcaption></figure><p>After capturing animations this week, I finished up the crashing system I had started last week. I was previously having issues calculating if we land at a bad angle, but I was able to resolve this by comparing the angle between the previous in air velocity and the velocity when landing. After converting the velocity into the skater local space I had to disregard the z axis and then I was able to accurately get the change in angle, which we can test against a given variable to determine if this landing should result in a\u00a0crash.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/565/1*28ovWoAkx3CRDPbkYdijYA.gif\"><figcaption>Landing sideways resulting in a\u00a0bail</figcaption></figure><p>I also added in crashing if we land upside down, with some simple collision detection. I just had to make sure I did not auto correct the player as soon as they hit the ground, so I made some tweaks to alignment of our\u00a0skater.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/424/1*i3uTkVf_GXSNtphoUF9ojQ.gif\"><figcaption>Landing upside down resulting in a\u00a0bail</figcaption></figure><p>After having a lot of fun crashing and bringing our skater to life, it was time for me to start on the flat ground tricks! I did some research on how EA\u2019s Skate series achieved this and they utilized a \u201cFlick\u201d system. This would take the input of the right analog stick and check different areas the user would hit along the circle, and if it matched a combination it would enact that skate trick. Below is a drawing of what information we need to get from our users analog stick input to determine when we start a trick and if we flick a valid combination.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/343/1*Qme6CC2ChdsYRzrD4bPkpA.png\"><figcaption><a href=\"https://gamedev.stackexchange.com/questions/182534/comparing-analog-stick-movements-to-predefined-flick-shapes\">Source</a></figcaption></figure><p>I spent the rest of my time this week creating a UI visualizer of the analog stick that would trace the lines similar to the above image. This will be useful as I create this system and need to debug. I plan to continue more on this flick system next week, as well as creating a custom data type that users can create combos and add the associated animations/actions.</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f0018b30103f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aAnimations &amp; Motion\u00a0Capture</h3>\n<p>This week I worked on capturing some cool animations through motion capture as well as finishing up ways to crash, and finally started on to flat ground\u00a0tricks!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/576/1*c6hC08JbURK7qb77_HS7vw.gif\"><figcaption>Motion Capture on a skateboard</figcaption></figure><p>It was a lot of fun to put on the suit and hop into a motion capture studio. I recorded multiple animations for a variety of poses and tricks including idle, landing, falling, getting on and off, as well as in air grabs and flat ground tricks. With these motion capture files and the help of an animator I was able to produce the FBX files to bring into Unreal Engine. While in Unreal Engine I only had to retarget animations to the skeleton of the current character asset that I am using as well as make some minor adjustments. Now I am ready to implement these animations into the gameplay!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/320/1*MjBe3pZC9sG7VgWX9_p-mg.gif\"><figcaption>Mocap File brought into\u00a0Unreal</figcaption></figure><p>After capturing animations this week, I finished up the crashing system I had started last week. I was previously having issues calculating if we land at a bad angle, but I was able to resolve this by comparing the angle between the previous in air velocity and the velocity when landing. After converting the velocity into the skater local space I had to disregard the z axis and then I was able to accurately get the change in angle, which we can test against a given variable to determine if this landing should result in a\u00a0crash.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/565/1*28ovWoAkx3CRDPbkYdijYA.gif\"><figcaption>Landing sideways resulting in a\u00a0bail</figcaption></figure><p>I also added in crashing if we land upside down, with some simple collision detection. I just had to make sure I did not auto correct the player as soon as they hit the ground, so I made some tweaks to alignment of our\u00a0skater.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/424/1*i3uTkVf_GXSNtphoUF9ojQ.gif\"><figcaption>Landing upside down resulting in a\u00a0bail</figcaption></figure><p>After having a lot of fun crashing and bringing our skater to life, it was time for me to start on the flat ground tricks! I did some research on how EA\u2019s Skate series achieved this and they utilized a \u201cFlick\u201d system. This would take the input of the right analog stick and check different areas the user would hit along the circle, and if it matched a combination it would enact that skate trick. Below is a drawing of what information we need to get from our users analog stick input to determine when we start a trick and if we flick a valid combination.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/343/1*Qme6CC2ChdsYRzrD4bPkpA.png\"><figcaption><a href=\"https://gamedev.stackexchange.com/questions/182534/comparing-analog-stick-movements-to-predefined-flick-shapes\">Source</a></figcaption></figure><p>I spent the rest of my time this week creating a UI visualizer of the analog stick that would trace the lines similar to the above image. This will be useful as I create this system and need to debug. I plan to continue more on this flick system next week, as well as creating a custom data type that users can create combos and add the associated animations/actions.</p>\n<p>If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f0018b30103f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["motion-capture","unreal-engine","game-development","skateboarding"]},{"title":"Skateboard Controller \u2014 Flipping/Spinning","pubDate":"2023-06-16 01:11:06","link":"https://medium.com/@arondylan72/skateboard-controller-flipping-spinning-7ea9839786ef?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/7ea9839786ef","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/480/1*OzzocFBGv9eboi82_paURw.gif","description":"\n<p>This week I worked on adding in some ways for our skater to perform tricks. I focused on aerial tricks to allow the player to perform vertical flips and horizontal spins on the skateboard!</p>\n<p>In order to do this I had to create a separation between ground control and aerial control. Similarly to how the character movement controller in Unreal Engine handles jumping, I created a variable \u201cisAerial\u201d. With this distinction between ground movement and aerial movement, I now allow the player to add rotations horizontal and vertically based on their movement input. This worked great, but it was not looking very fluid, so I implemented additional factors such as adding momentum to give a more realistic feel to our rotations. Here is a cool\u00a0flip!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*OzzocFBGv9eboi82_paURw.gif\"><figcaption>Front flip</figcaption></figure><p>In addition to momentum, I wanted to add ways to make aerial tricks more forgiving to the player so I implemented auto adjustments to the rotation for perfect landings within reason. I originally thought to do this by calculating the position for the actor to land, but this seemed unnecessary to do, and if an obstacle happens to be in the way I would not be able to predict that and the landing would be incorrect. I took a more simplistic approach to this by doing a simple ray cast in the direction of our velocity and with some linear interpolation it turned out smoothly. Here is an example of this with the purple lines showcasing the ray cast and the player adjusting their pitch for\u00a0landing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*Omm9aRmm_P6vSmCn3dLxlg.gif\"><figcaption>Aerial adjusting the pitch of our player for\u00a0landing</figcaption></figure><p>After creating flipping and spinning, I started the implementations of grabbing which I plan to get animations for. I also started adding ways to crash such as landing upside down or sideways. I was having trouble calculating the correct angles and encountered some odd crashes, so I will continue to iterate on crashing in the coming\u00a0week.</p>\n<p>Now that we are are getting some cool tricks in I need to gather some animations, so I plan to do a Mocap shoot to get unique animations. If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7ea9839786ef\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>This week I worked on adding in some ways for our skater to perform tricks. I focused on aerial tricks to allow the player to perform vertical flips and horizontal spins on the skateboard!</p>\n<p>In order to do this I had to create a separation between ground control and aerial control. Similarly to how the character movement controller in Unreal Engine handles jumping, I created a variable \u201cisAerial\u201d. With this distinction between ground movement and aerial movement, I now allow the player to add rotations horizontal and vertically based on their movement input. This worked great, but it was not looking very fluid, so I implemented additional factors such as adding momentum to give a more realistic feel to our rotations. Here is a cool\u00a0flip!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*OzzocFBGv9eboi82_paURw.gif\"><figcaption>Front flip</figcaption></figure><p>In addition to momentum, I wanted to add ways to make aerial tricks more forgiving to the player so I implemented auto adjustments to the rotation for perfect landings within reason. I originally thought to do this by calculating the position for the actor to land, but this seemed unnecessary to do, and if an obstacle happens to be in the way I would not be able to predict that and the landing would be incorrect. I took a more simplistic approach to this by doing a simple ray cast in the direction of our velocity and with some linear interpolation it turned out smoothly. Here is an example of this with the purple lines showcasing the ray cast and the player adjusting their pitch for\u00a0landing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*Omm9aRmm_P6vSmCn3dLxlg.gif\"><figcaption>Aerial adjusting the pitch of our player for\u00a0landing</figcaption></figure><p>After creating flipping and spinning, I started the implementations of grabbing which I plan to get animations for. I also started adding ways to crash such as landing upside down or sideways. I was having trouble calculating the correct angles and encountered some odd crashes, so I will continue to iterate on crashing in the coming\u00a0week.</p>\n<p>Now that we are are getting some cool tricks in I need to gather some animations, so I plan to do a Mocap shoot to get unique animations. If you would like to dive deeper into my code as always it is publicly available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7ea9839786ef\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["game-development","unreal-engine"]},{"title":"Skateboard Controller\u200a\u2014\u200aCamera Movement","pubDate":"2023-06-08 13:47:32","link":"https://medium.com/@arondylan72/skateboard-controller-camera-movement-cbe8d1484b74?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/cbe8d1484b74","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/288/1*OLU4Q2mQPrplHG0pwK897Q.gif","description":"\n<h3>Skateboard Controller\u200a\u2014\u200aCamera\u00a0Movement</h3>\n<p>For this week I focused on finetuning movement as well as creating a nice camera for my skateboard controller in Unreal\u00a0Engine.</p>\n<p>Last week I was able to get the skateboarder riding along ramps, but when the skater was on a slope he would automatically turn around which looked nice, but that is not what real skaters do! On a skateboard you can ride \u201cfakie\u201d which is basically rolling backwards, so in order to allow this I figured I would constrain movement on the surface in relation to the forward vector of the skater. This worked at first, but it wasn't until I started adding more functionality like jumping and did some more testing that I found my skater rolling in unrealistic ways. Here is my original code for constraining the lateral velocity.</p>\n<pre>Velocity.X = UpdatedComponent-&gt;GetForwardVector().X * FVector::DotProduct(UpdatedComponent-&gt;GetForwardVector(), Velocity);<br>Velocity.Y = UpdatedComponent-&gt;GetForwardVector().Y * FVector::DotProduct(UpdatedComponent-&gt;GetForwardVector(), Velocity);</pre>\n<p>I was really confused what was going on, and I noticed the issue stopped when I no longer rotated the player, which lead me to realize I need to be constraining this movement in the local space of the skater. So with a bit of research into vector math I was able to convert the velocity into the skater local space and then back to world by summing up the respective direction vectors times the scalar obtained from the computed dot products. Below is the improved velocity\u00a0code!</p>\n<pre>//Turn to local skater coordinates<br>double localForwardVelocity = FVector::DotProduct(UpdatedComponent-&gt;GetForwardVector(), Velocity);<br>double localUpVelocity = FVector::DotProduct(UpdatedComponent-&gt;GetUpVector(), Velocity);<br>double localRightVelocity = FVector::DotProduct(UpdatedComponent-&gt;GetRightVector(), Velocity);<br><br>//constrain to only moving forward/backward (with a little bit of sliding based on SidewaysWheelSlide value)<br>localRightVelocity *= SidewaysWheelSlide;<br><br>//convert to global for velocity<br>Velocity = localForwardVelocity * UpdatedComponent-&gt;GetForwardVector() + localUpVelocity * UpdatedComponent-&gt;GetUpVector() + localRightVelocity * UpdatedComponent-&gt;GetRightVector();</pre>\n<p>After fixing these issues with movement and adding some more public facing variables to tweak. I created some rough versions of jumping and reverting just to test how everything was working in the level. After that it was time to make a better camera. Taking inspiration from the Tony Hawk Pro Skater series, I wanted to have the camera face the direction the player is moving. Utilizing the spring arm component in unreal engine I was able to add rotational lag, and then perform a check on the direction we are moving to see if the camera should do a 180 as seen below where I roll backwards.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/288/1*OLU4Q2mQPrplHG0pwK897Q.gif\"><figcaption>Riding up a ramp and then rolling backwards into\u00a0Fakie</figcaption></figure><p>I plan to gather more animations and visual feedback especially for doing tricks, but to further enhance our player I implemented a basic procedural animation. When turning, I utilize that input to apply a rotation on the Skeleton\u2019s spine bone at runtime. After adding some variables and lerping from either direction it started looking really good. I plan to do more procedural animation in the future for other inputs such as flipping or spinning in the\u00a0air.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*m5sgOdIElvuN5pIk9gl7ow.gif\"><figcaption>Turning rotates the spine\u00a0bone</figcaption></figure><p>This was my progress for this week, and I am really excited to start doing some tricks in the next week and implement spinning!</p>\n<p>As always if you would like to dive into the code, it is publicly available here: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cbe8d1484b74\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Skateboard Controller\u200a\u2014\u200aCamera\u00a0Movement</h3>\n<p>For this week I focused on finetuning movement as well as creating a nice camera for my skateboard controller in Unreal\u00a0Engine.</p>\n<p>Last week I was able to get the skateboarder riding along ramps, but when the skater was on a slope he would automatically turn around which looked nice, but that is not what real skaters do! On a skateboard you can ride \u201cfakie\u201d which is basically rolling backwards, so in order to allow this I figured I would constrain movement on the surface in relation to the forward vector of the skater. This worked at first, but it wasn't until I started adding more functionality like jumping and did some more testing that I found my skater rolling in unrealistic ways. Here is my original code for constraining the lateral velocity.</p>\n<pre>Velocity.X = UpdatedComponent-&gt;GetForwardVector().X * FVector::DotProduct(UpdatedComponent-&gt;GetForwardVector(), Velocity);<br>Velocity.Y = UpdatedComponent-&gt;GetForwardVector().Y * FVector::DotProduct(UpdatedComponent-&gt;GetForwardVector(), Velocity);</pre>\n<p>I was really confused what was going on, and I noticed the issue stopped when I no longer rotated the player, which lead me to realize I need to be constraining this movement in the local space of the skater. So with a bit of research into vector math I was able to convert the velocity into the skater local space and then back to world by summing up the respective direction vectors times the scalar obtained from the computed dot products. Below is the improved velocity\u00a0code!</p>\n<pre>//Turn to local skater coordinates<br>double localForwardVelocity = FVector::DotProduct(UpdatedComponent-&gt;GetForwardVector(), Velocity);<br>double localUpVelocity = FVector::DotProduct(UpdatedComponent-&gt;GetUpVector(), Velocity);<br>double localRightVelocity = FVector::DotProduct(UpdatedComponent-&gt;GetRightVector(), Velocity);<br><br>//constrain to only moving forward/backward (with a little bit of sliding based on SidewaysWheelSlide value)<br>localRightVelocity *= SidewaysWheelSlide;<br><br>//convert to global for velocity<br>Velocity = localForwardVelocity * UpdatedComponent-&gt;GetForwardVector() + localUpVelocity * UpdatedComponent-&gt;GetUpVector() + localRightVelocity * UpdatedComponent-&gt;GetRightVector();</pre>\n<p>After fixing these issues with movement and adding some more public facing variables to tweak. I created some rough versions of jumping and reverting just to test how everything was working in the level. After that it was time to make a better camera. Taking inspiration from the Tony Hawk Pro Skater series, I wanted to have the camera face the direction the player is moving. Utilizing the spring arm component in unreal engine I was able to add rotational lag, and then perform a check on the direction we are moving to see if the camera should do a 180 as seen below where I roll backwards.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/288/1*OLU4Q2mQPrplHG0pwK897Q.gif\"><figcaption>Riding up a ramp and then rolling backwards into\u00a0Fakie</figcaption></figure><p>I plan to gather more animations and visual feedback especially for doing tricks, but to further enhance our player I implemented a basic procedural animation. When turning, I utilize that input to apply a rotation on the Skeleton\u2019s spine bone at runtime. After adding some variables and lerping from either direction it started looking really good. I plan to do more procedural animation in the future for other inputs such as flipping or spinning in the\u00a0air.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*m5sgOdIElvuN5pIk9gl7ow.gif\"><figcaption>Turning rotates the spine\u00a0bone</figcaption></figure><p>This was my progress for this week, and I am really excited to start doing some tricks in the next week and implement spinning!</p>\n<p>As always if you would like to dive into the code, it is publicly available here: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cbe8d1484b74\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["unreal-engine","game-development"]},{"title":"Skateboard Controller in Unreal Engine\u200a\u2014\u200aMovement","pubDate":"2023-06-02 20:07:34","link":"https://medium.com/@arondylan72/skateboard-controller-in-unreal-engine-movement-7f162f933c2?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/7f162f933c2","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/323/1*1Gp_Q13XNhbPpEY27LpqTg.gif","description":"\n<p>Skateboard Controller in Unreal Engine\u200a\u2014\u200aMovement</p>\n<p>For this week in my personal programming project I focused on creating movement, the foundation for a skateboarding character! I initially set up a park map and gathered character assets, so I am not just showing off cubes! For the controller I started off trying to create a physics object with wheels like a skateboard and this looked realistic, but it would not always act how I wanted. It would flip over or bug out when hitting certain collisions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/323/1*1Gp_Q13XNhbPpEY27LpqTg.gif\"><figcaption>Physics based controller with wheels\u200a\u2014\u200aSkateboardController.cpp</figcaption></figure><p>I did not want to just apply forces for movement, I plan to override the simulation in many ways such as keeping the board pointed towards where the player tries to go as well as prevent flipping (unless if the player chooses to). I am taking inspiration from EA\u2019s Skate video game which has a nice blend of arcade feeling and realism. So instead of continuing with this controller, I looked into extending Unreal Engines character movement component.</p>\n<p>The Unreal character movement component provides a strong foundation for basic humanoid movement and networking, so this seemed like a better place to build off of. Unfortunately there is little documentation on this. Luckily I found a great tutorial from <a href=\"https://www.youtube.com/channel/UCLwIwKFEh0Dy_IGCDXZuoWA\">delgoodie</a> who went in depth on adding custom movement modes. I learned the importance of \u201cPhys\u201d functions that are responsible for calculating the respective physics of each movement mode. I then implemented a PhysSkate function for my custom skate movement mode that took into account the slope the player is on and added forces accordingly as well as rotating the player to the\u00a0surface.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/314/1*ImLtUA-2OiYoaNtLdypqPA.gif\"><figcaption>Character on my custom Skate mode\u200a\u2014\u200aSkateCharacter.cpp</figcaption></figure><p>After creating this function in my custom movement component, I gave my skate character controller the ability to push and I was really liking how this was starting to feel! I plan to continue iterating on this by making smoother transition of character rotation as well as creating a camera manager that will rotate the camera to always face the direction the player is\u00a0moving.</p>\n<p>If you would like to see more, the source code is available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f162f933c2\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Skateboard Controller in Unreal Engine\u200a\u2014\u200aMovement</p>\n<p>For this week in my personal programming project I focused on creating movement, the foundation for a skateboarding character! I initially set up a park map and gathered character assets, so I am not just showing off cubes! For the controller I started off trying to create a physics object with wheels like a skateboard and this looked realistic, but it would not always act how I wanted. It would flip over or bug out when hitting certain collisions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/323/1*1Gp_Q13XNhbPpEY27LpqTg.gif\"><figcaption>Physics based controller with wheels\u200a\u2014\u200aSkateboardController.cpp</figcaption></figure><p>I did not want to just apply forces for movement, I plan to override the simulation in many ways such as keeping the board pointed towards where the player tries to go as well as prevent flipping (unless if the player chooses to). I am taking inspiration from EA\u2019s Skate video game which has a nice blend of arcade feeling and realism. So instead of continuing with this controller, I looked into extending Unreal Engines character movement component.</p>\n<p>The Unreal character movement component provides a strong foundation for basic humanoid movement and networking, so this seemed like a better place to build off of. Unfortunately there is little documentation on this. Luckily I found a great tutorial from <a href=\"https://www.youtube.com/channel/UCLwIwKFEh0Dy_IGCDXZuoWA\">delgoodie</a> who went in depth on adding custom movement modes. I learned the importance of \u201cPhys\u201d functions that are responsible for calculating the respective physics of each movement mode. I then implemented a PhysSkate function for my custom skate movement mode that took into account the slope the player is on and added forces accordingly as well as rotating the player to the\u00a0surface.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/314/1*ImLtUA-2OiYoaNtLdypqPA.gif\"><figcaption>Character on my custom Skate mode\u200a\u2014\u200aSkateCharacter.cpp</figcaption></figure><p>After creating this function in my custom movement component, I gave my skate character controller the ability to push and I was really liking how this was starting to feel! I plan to continue iterating on this by making smoother transition of character rotation as well as creating a camera manager that will rotate the camera to always face the direction the player is\u00a0moving.</p>\n<p>If you would like to see more, the source code is available on my GitHub: <a href=\"https://github.com/DylanNAron/SkateboardControllerPPP\">https://github.com/DylanNAron/SkateboardControllerPPP</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f162f933c2\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["unreal-engine","game-development"]},{"title":"Personal Programming Project","pubDate":"2023-05-18 00:45:31","link":"https://medium.com/@arondylan72/personal-programming-project-ebe704be7ea0?source=rss-c1dac106fb1e------2","guid":"https://medium.com/p/ebe704be7ea0","author":"Dylan Aron","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*n--CTyW9th34c_Re","description":"\n<p>For this summer I will be starting a programming project where I will be providing weekly updates. I will be creating custom skateboard movement in Unreal Engine &amp; C++. Stay tuned to see my progress!</p>\n<p>I plan to create realistic movement with a follow cam and with pushing and turning in the first couple weeks. Then I will be implementing tricks which include Aerial tricks, flat ground tricks, and grabs! I will also be creating many settings to tweak the riding experience as well as making a lot of ways a player can crash or\u00a0bail.</p>\n<p>While implementing these mechanics I will also be collecting animations from live Mocap sessions. Having lots of visualization is key to a great skateboarding controller. Especially when I implement a modular system for flat ground tricks I will want to put multiple tricks\u00a0in!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*n--CTyW9th34c_Re\"><figcaption>Photo by <a href=\"https://unsplash.com/@1ofakind?utm_source=medium&amp;utm_medium=referral\">shawn henry</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ebe704be7ea0\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>For this summer I will be starting a programming project where I will be providing weekly updates. I will be creating custom skateboard movement in Unreal Engine &amp; C++. Stay tuned to see my progress!</p>\n<p>I plan to create realistic movement with a follow cam and with pushing and turning in the first couple weeks. Then I will be implementing tricks which include Aerial tricks, flat ground tricks, and grabs! I will also be creating many settings to tweak the riding experience as well as making a lot of ways a player can crash or\u00a0bail.</p>\n<p>While implementing these mechanics I will also be collecting animations from live Mocap sessions. Having lots of visualization is key to a great skateboarding controller. Especially when I implement a modular system for flat ground tricks I will want to put multiple tricks\u00a0in!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*n--CTyW9th34c_Re\"><figcaption>Photo by <a href=\"https://unsplash.com/@1ofakind?utm_source=medium&amp;utm_medium=referral\">shawn henry</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ebe704be7ea0\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["game-development","programming","unreal-engine"]}]}